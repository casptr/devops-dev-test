@page "/admin/reservaties"
@using Foodtruck.Shared.Reservations;
@attribute [Authorize]
@layout AdminLayout
@inject IReservationService ReservationService


<PageTitle>Admin page</PageTitle>

<MudText Typo="Typo.h4" Class="mb-3">Reservaties</MudText>
<div class="relative">
    @if (loading)
    {
        <div class="calendar-loading">
            <MudStack Row Spacing="7" AlignItems="AlignItems.Center" Justify="Justify.Center" Class="flex-grow-1">
                 <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate />
                 <MudText>Reservaties ophalen..</MudText>
             </MudStack>
         </div>
    }
    <MudCalendar Items="calendarItems" ShowDay="false" Outlined="true" DayCellHeight="24" DayTimeInterval="CalendarTimeInterval.Minutes60">
        <CellTemplate>
            @{
                CustomItem item = (CustomItem)context;
            }
            <div class="@item.cssClasses" style="background-color: @GetColor(item.Color);" @onmouseover="() => MouseOverCalendarItem(item.Reservation)" @onmouseout="() => MouseOutCalendarItem(item.Reservation)" @onclick="() => CalendarItemClicked(item.Reservation)">
                <MudText Style="color: #ffff">@context.Text</MudText>
            </div>
        </CellTemplate>
    </MudCalendar>
</div>
@code {

    private IEnumerable<ReservationDto.Detail>? reservations;
    private List<CustomItem> calendarItems = new();
    private bool loading = true;


    private string GetColor(Color color) => $"var(--mud-palette-{color.ToDescriptionString()})";
    private Color[] calendarItemColors = { Color.Success, Color.Secondary, Color.Tertiary, Color.Dark };

    [Inject]
    private IDialogService DialogService { get; set; }

    protected override async Task OnInitializedAsync()
    {

        reservations = (await ReservationService.GetDetailedAsync()).Reservations;

        if (reservations is not null)
        {
            int previousColorIndex = 0;
            calendarItems = reservations.Select(reservation => new CustomItem()
                {
                    Start = reservation.Start,
                    End = reservation.End,
                    Text = reservation.Description ?? "Reservatie",
                    Color = calendarItemColors[previousColorIndex++ % calendarItemColors.Length],
                    Reservation = reservation,
                }).ToList();
        }

        loading = false;
        StateHasChanged();
    }

    private class CustomItem : CalendarItem
    {
        public Color Color { get; set; } = Color.Primary;
        public ReservationDto.Detail Reservation { get; set; }
        public bool IsBeingHovered { get; set; }

        public string cssClasses => $"admin_reservation_calendar_item {(IsBeingHovered ? "admin_reservation_calendar_item_hover" : "")}";
    }

    // Hover effect should apply to every CalendarItem of that reservation
    private void MouseOverCalendarItem(ReservationDto.Detail reservation)
    {
        calendarItems.Where(calendarItem => calendarItem.Reservation.Id == reservation.Id).ToList().ForEach(c => c.IsBeingHovered = true);
    }

    private void MouseOutCalendarItem(ReservationDto.Detail reservation)
    {
        calendarItems.Where(calendarItem => calendarItem.Reservation.Id == reservation.Id).ToList().ForEach(c => c.IsBeingHovered = false);
    }

    private void CalendarItemClicked(ReservationDto.Detail reservation)
    {
        DialogService.ShowMessageBox("Reservation was clicked", $"Id {reservation.Id} | Description: {reservation.Description}");
    }

}
