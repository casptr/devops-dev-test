@page "/admin/reservaties"
@using Foodtruck.Shared.Reservations;
@using System.Diagnostics.CodeAnalysis;
@attribute [Authorize]
@layout AdminLayout
@inject IReservationService ReservationService


<PageTitle>Admin page</PageTitle>

<MudText Typo="Typo.h4" Class="mb-3">Reservaties</MudText>
<div class="relative">
    @if (loading)
    {
        <div class="calendar-loading">
            <MudStack Row Spacing="7" AlignItems="AlignItems.Center" Justify="Justify.Center" Class="flex-grow-1">
                 <MudProgressCircular Color="Color.Primary" Size="Size.Large" Indeterminate />
                 <MudText>Reservaties ophalen..</MudText>
             </MudStack>
         </div>
    }
    <MudCalendar Items="calendarItems" ShowDay="false" Outlined="true" DayCellHeight="24" DayTimeInterval="CalendarTimeInterval.Minutes60">
        <CellTemplate>
            @{
                CustomCalendarItem item = (CustomCalendarItem)context;
            }
            <div class="@item.cssClasses" style="background-color: @GetColor(item.Color);" @onmouseover="() => MouseOverCalendarItem(item.Reservation)" @onmouseout="() => MouseOutCalendarItem(item.Reservation)" @onclick="() => CalendarItemClicked(item.Reservation)">
                <MudText Style="color: #ffff">@context.Text</MudText>
            </div>
        </CellTemplate>
    </MudCalendar>
</div>
@code {
    // private readonly HashSet<int> yearsFetched = new();
    // private readonly HashSet<int> uniqueReservationIds = new HashSet<int>();

    private IEnumerable<ReservationDto.Detail>? reservations;
    private List<CustomCalendarItem> calendarItems = new();
    private bool loading = true;

    private string GetColor(Color color) => $"var(--mud-palette-{color.ToDescriptionString()})";
    private Color[] calendarItemColors = { Color.Success, Color.Secondary, Color.Tertiary, Color.Dark };

    [Inject]
    private IDialogService DialogService { get; set; } = default!;

    protected override async Task OnInitializedAsync()
    {
        ReservationRequest.Detailed request = new ReservationRequest.Detailed()
            {
                FromDate = DateTime.MinValue,
                ToDate = DateTime.MaxValue,
            };
        reservations = (await ReservationService.GetDetailedAsync(request)).Reservations;

        if (reservations is not null)
        {
            int previousColorIndex = 0;
            calendarItems = reservations.Select(reservation => new CustomCalendarItem()
                {
                    Start = reservation.Start.ToLocalTime(),
                    End = reservation.End.ToLocalTime(),
                    Text = reservation.Description ?? "Reservatie",
                    Color = calendarItemColors[previousColorIndex++ % calendarItemColors.Length],
                    Reservation = reservation,
                }).ToList();
        }

        loading = false;
        StateHasChanged();
    }

    // TODO: do we need to fetch all reservations at the start, or just a limited range?

    // private async Task DateRangeChanged(DateRange dateRange)
    // {
    //     int yearToFetch = -1;
    //     int startYear = dateRange.Start.Value.ToUniversalTime().Year;
    //     int endYear = dateRange.End.Value.ToUniversalTime().Year;

    //     if (!yearsFetched.Contains(startYear))
    //         yearToFetch = startYear;
    //     else if (!yearsFetched.Contains(endYear))
    //         yearToFetch = endYear;

    //     if (yearToFetch == -1)
    //         return;


    //     loading = true;

    //     ReservationRequest.Detailed request = new ReservationRequest.Detailed()
    //         {
    //             FromDate = new DateTime(yearToFetch, 1, 1, 0, 0, 0),
    //             ToDate = new DateTime(yearToFetch, 12, 31, 23, 59, 59),
    //         };
    //     reservations = (await ReservationService.GetDetailedAsync(request)).Reservations;
    //     if (reservations is not null)
    //     {
    //         int previousColorIndex = 0;
    //         calendarItems.AddRange(reservations.Where(r => uniqueReservationIds.Add(r.Id)).Select(reservation => new CustomCalendarItem()
    //             {
    //                 Start = reservation.Start,
    //                 End = reservation.End,
    //                 Text = reservation.Description ?? "Reservatie",
    //                 Color = calendarItemColors[previousColorIndex++ % calendarItemColors.Length],
    //                 Reservation = reservation,
    //             }));
    //     }
    //     yearsFetched.Add(yearToFetch);

    //     loading = false;
    // }

    private class CustomCalendarItem : CalendarItem
    {
        public Color Color { get; set; } = Color.Primary;
        public ReservationDto.Detail Reservation { get; set; }
        public bool IsBeingHovered { get; set; }

        public string cssClasses => $"admin_reservation_calendar_item {(IsBeingHovered ? "admin_reservation_calendar_item_hover" : "")}";
    }

    // Hover effect should apply to every CalendarItem of that reservation
    private void MouseOverCalendarItem(ReservationDto.Detail reservation) => calendarItems.Where(calendarItem => calendarItem.Reservation.Id == reservation.Id).ToList().ForEach(c => c.IsBeingHovered = true);
    private void MouseOutCalendarItem(ReservationDto.Detail reservation) => calendarItems.Where(calendarItem => calendarItem.Reservation.Id == reservation.Id).ToList().ForEach(c => c.IsBeingHovered = false);


    private void CalendarItemClicked(ReservationDto.Detail reservation)
    {
        DialogService.ShowMessageBox("Reservation was clicked", $"Id {reservation.Id} | Description: {reservation.Description}");
    }

}
