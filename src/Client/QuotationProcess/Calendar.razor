@page "/aanvraag/datum-kiezen"
@using Foodtruck.Client.QuotationProcess.Components
@using Foodtruck.Shared.Reservations;
@inject IReservationService ReservationService

<MudContainer MaxWidth="MaxWidth.Large" Class="mt-2">
    <QuotationProcessTimeline currentStep="QuotationProcessStep.CHOOSE_DATE" />

    <MudStack Spacing="10">
        <MudText Typo="Typo.h4" Align="Align.Center">Selecteer een datum</MudText>
        <MudDateRangePicker Rounded="true" PickerVariant="PickerVariant.Static" @bind-DateRange="selectedDateRange" MinDate="DateTime.Now.Date" IsDateDisabledFunc="IsDateAlreadyBooked" Elevation="5" DisableToolbar="true" Class="datum-aanvraag-picker"/>
        <MudText>Gelieve de datum te selecteren waarop je evenement begint en eindigt. De foodtruck wordt opgehaald de dag na de einddatum van je evenement.</MudText>
        <MudGrid Spacing="4">
            <MudItem xs="12" md="6">
                <MudTimePicker @ref="startTimePicker" Label="Startuur" @bind-Time="timeStart" HelperText="De foodtruck kan ten vroegste om 15:00 gebruikt worden">
                    <PickerActions>
                        <MudSpacer />
                        <MudButton OnClick="@(() => startTimePicker.Close(false))">Annuleren</MudButton>
                        <MudButton Color="Color.Primary" OnClick="@(() => startTimePicker.Close())">Ok</MudButton>
                    </PickerActions>

                </MudTimePicker>
            </MudItem>

            <MudItem xs="12" md="6">
                <MudTimePicker @ref="endTimePicker" Label="Einduur" @bind-Time="timeEnd" HelperText="Uur dat de foodtruck terug wordt opgehaald, ten laatste 11:00">
                    <PickerActions>
                        <MudSpacer />
                        <MudButton OnClick="@(() => endTimePicker.Close(false))">Annuleren</MudButton>
                        <MudButton Color="Color.Primary" OnClick="@(() => endTimePicker.Close())">Ok</MudButton>
                    </PickerActions>
                </MudTimePicker>
            </MudItem>
        </MudGrid>
        <MudDivider />
        <MudStack Spacing="1" Justify="Justify.Center" AlignItems="AlignItems.Center">
            <MudText Style="min-width: 200px;">Gekozen datum en tijd</MudText>
            <MudChip Size="Size.Large" Color="Color.Primary" Variant="Variant.Outlined">@selectedDateRange?.Start?.ToString("dd/MM/yyyy") vanaf @timeStart?.ToString(@"hh\:mm") tot @selectedDateRange?.End?.AddDays(1).ToString("dd/MM/yyyy") om @timeEnd?.ToString(@"hh\:mm")</MudChip>
        </MudStack>

        <MudStack Spacing="4" Justify="Justify.Center" Row="true">
            <MudButton Variant="Variant.Outlined" DisableElevation="true" OnClick="Cancel">Annuleren</MudButton>
            <MudButton Variant="Variant.Filled" Color="Color.Primary" DisableElevation="true" OnClick="ConfirmDate" Href="/formule/selecteren">Doorgaan</MudButton>
        </MudStack>

    </MudStack>
</MudContainer>

@code {
    private DateRange selectedDateRange = new DateRange(DateTime.Now.Date, DateTime.Now.Date);
    private TimeSpan? timeStart = new TimeSpan(15, 00, 00);
    private TimeSpan? timeEnd = new TimeSpan(11, 00, 00);

    MudTimePicker startTimePicker, endTimePicker;

    private IEnumerable<ReservationDto.Index>? reservations;

    public Func<DateTime, bool> IsDateAlreadyBooked
    {
        get
        {
            return dateTime => reservations.Any(reservation => dateTime >= reservation.Start && dateTime <= reservation.End);
        }
    }


    private void ConfirmDate()
    {
        Console.WriteLine($"{selectedDateRange.Start.Value.ToShortDateString()} to {selectedDateRange.End.Value.ToShortDateString()}");
    }

    private void Cancel()
    {

    }


    protected override async Task OnInitializedAsync()
    {
        reservations = await ReservationService.GetAllAsync();

        foreach (var r in reservations)
        {
            Console.WriteLine($"{r.Id} - {r.Start} - {r.End}");
        }
        StateHasChanged();
    }
}