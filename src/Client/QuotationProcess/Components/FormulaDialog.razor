@using Foodtruck.Client.QuotationProcess.Helpers;
@using Foodtruck.Shared.Supplements
@using Foodtruck.Shared.Formulas
@inject QuotationProcessState QuotationProcessState

<MudDialog DefaultFocus="DefaultFocus.LastChild">
    <DialogContent>
        @if (CurrentChoice.IsQuantityNumberOfGuests)
        {
            <MudText Class="mb-6">Gelieve een of meerdere keuzes te maken.</MudText>
        }
        else
        {
            <MudText Class="mb-6">Gelieve @(CurrentChoice.MinQuantity) stuks te kiezen.</MudText>
        }
        @foreach (var choice in CurrentChoice.Options)
        {
            <MudGrid Class="my-3">
                <MudItem xs="4" Class="d-flex align-center justify-start">
                    <MudImage Src="@(choice.Supplement.ImageUrls.ElementAt(0).ToString())" Width="100" />
                </MudItem>

                <MudItem xs="5" Class="d-flex align-center justify-start">
                    <MudText>@(choice.Supplement.Name)</MudText>
                    </MudItem>
                    <MudItem xs="3" Class="d-flex align-center justify-start">
                        @if (CurrentChoice.IsQuantityNumberOfGuests)
                    {
                        <MudCheckBox Color="Color.Primary" Style="width: 150px;" @bind-Checked="choice.IsChosen" />
                    }
                    else
                    {

                        <MudNumericField Variant="Variant.Outlined" @bind-Value="choice.Quantity" Min="0" />

                    }
                </MudItem>
            </MudGrid>
            <MudDivider />
        }
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Annuleren</MudButton>
        @if (CurrentIndex != 0)
        {
            <MudButton OnClick="Previous">Vorige</MudButton>
        }
        <MudButton Color="Color.Primary" OnClick="Submit">Doorgaan</MudButton>
    </DialogActions>


</MudDialog>
@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }
    [Parameter, EditorRequired] public FormulaDto.Detail? Formula { get; set; }
    [Parameter, EditorRequired] public Action OnSubmit{ get; set; }

    private readonly List<FormulaChoice> choices = new();
    public IReadOnlyList<FormulaChoice> Choices => choices.AsReadOnly();

    private int CurrentIndex = 0;
    private FormulaChoice CurrentChoice => choices[CurrentIndex];

    protected override void OnParametersSet()
    {
        if (QuotationProcessState.HasConfiguredFormulaChoices(Formula))
        {
            choices.AddRange(QuotationProcessState.FormulaChoices);
        }
        else
        {
            choices.AddRange(Formula.Choices.Select(choice => new FormulaChoice(choice)));
        }
    }

    void Submit()
    {
        if (CurrentIndex != choices.Count - 1)
        {
            CurrentIndex++;
            return;
        }

        QuotationProcessState.ConfigureFormula(Formula, Choices.ToList());
        choices.Clear();
        MudDialog.Close(DialogResult.Ok(true));
        OnSubmit.Invoke();
    }

    void Cancel()
    {
        choices.Clear();
        MudDialog.Cancel();
    }

    void Previous()
    {
        CurrentIndex--;
    }


}